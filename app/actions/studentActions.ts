// app/actions/studentActions.ts

"use server";

import {prisma} from "@/lib/prisma";
import { revalidatePath } from "next/cache";

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö State ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (Optional but recommended)
type FormState = {
  success: string | null;
  error: string | null;
};

// ‚öôÔ∏è CREATE: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
export async function createStudent(
  prevState: FormState, // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  formData: FormData
): Promise<FormState> { // <--- ‡∏£‡∏∞‡∏ö‡∏∏ Type ‡∏ó‡∏µ‡πà‡∏à‡∏∞ return ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  try {
    const firstName = formData.get("firstName") as string;
    const lastName = formData.get("lastName") as string;
    // ... ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ...
    const email = formData.get("email") as string;

    if (!firstName || !email) {
      return { success: null, error: "First name and email are required." };
    }

    await prisma.student.create({
      data: {
        // ... ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ...
        firstName,
        lastName,
        major: formData.get("major") as string,
        faculty: formData.get("faculty") as string,
        email,
        phone: formData.get("phone") as string,
      },
    });

    revalidatePath("/students");
    return { success: "Student created successfully!", error: null };

  } catch (error) {
    if (error instanceof Error && error.message.includes("Unique constraint failed")) {
      return { success: null, error: "This email is already in use." };
    }
    return { success: null, error: "Something went wrong, could not create student." };
  }
}

// ... ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ...

// üìñ READ: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function getAllStudents() {
  try {
    const students = await prisma.student.findMany({
      orderBy: {
        createdAt: 'desc', // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
      }
    });
    return students;
  } catch (error) {
    console.error(error);
    return []; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
  }
}

// ‚úèÔ∏è UPDATE: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
export async function updateStudent(id: number, formData: FormData) {
  try {
    const firstName = formData.get("firstName") as string;
    const lastName = formData.get("lastName") as string;
    const major = formData.get("major") as string;
    const faculty = formData.get("faculty") as string;
    const email = formData.get("email") as string;
    const phone = formData.get("phone") as string;

    if (!id) {
        return { error: "Student ID is missing." };
    }

    await prisma.student.update({
      where: { id },
      data: {
        firstName,
        lastName,
        major,
        faculty,
        email,
        phone,
      },
    });

    revalidatePath("/students"); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    revalidatePath(`/students/${id}`); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    return { success: "Student updated successfully!" };

  } catch (error) {
    return { error: "Something went wrong, could not update student." };
  }
}

// üóëÔ∏è DELETE: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
// app/actions/studentActions.ts

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: ‡∏£‡∏±‡∏ö formData ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á id ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ
// app/actions/studentActions.ts

export async function deleteStudent(formData: FormData) {
  try {
    const id = formData.get("id");

    if (!id) {
      console.error("Delete failed: Student ID is missing.");
      return; // Exit if no ID
    }
      
    await prisma.student.delete({
      where: { 
        id: Number(id)
      },
    });

    // This is the most important part for updating the UI
    revalidatePath("/students");

  } catch (error) {
    // You can log the error on the server for debugging
    console.error("Failed to delete student:", error);
  }
}